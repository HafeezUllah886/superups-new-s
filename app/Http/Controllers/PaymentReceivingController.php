<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\paymentReceiving; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class PaymentReceivingController extends Controller { public function index() { $receivings = paymentReceiving::orderBy("\x69\144", "\144\x65\x73\143")->get(); $froms = accounts::where("\164\171\x70\145", "\41\x3d", "\x42\x75\163\x69\156\x65\163\163")->get(); $accounts = accounts::Business()->get(); return view("\106\151\156\141\156\x63\x65\56\162\x65\143\x65\x69\166\x69\x6e\x67\x2e\x69\x6e\x64\145\170", compact("\x72\x65\x63\145\151\166\x69\156\x67\163", "\146\162\x6f\x6d\163", "\x61\x63\143\x6f\x75\x6e\x74\x73")); } public function create() { } public function store(Request $request) { try { DB::beginTransaction(); $ref = getRef(); paymentReceiving::create(array("\x66\162\157\x6d\x49\x44" => $request->fromID, "\164\157\x49\104" => $request->accountID, "\x75\x73\145\162\x49\104" => auth()->user()->id, "\141\x6d\x6f\165\156\164" => $request->amount, "\x64\141\x74\x65" => $request->date, "\156\157\164\x65\x73" => $request->notes, "\162\x65\146\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, $request->amount, 0, "\x41\155\157\x75\156\164\40\122\145\143\145\x69\166\x65\x64\40\x3c\142\162\76" . $request->notes, $ref); createTransaction($request->fromID, $request->date, 0, $request->amount, "\101\x6d\157\165\x6e\x74\x20\x52\x65\x63\145\x69\x76\x65\x64\x20\x3c\142\164\76" . $request->notes, $ref); DB::commit(); return back()->with("\163\x75\143\143\145\163\163", "\x52\x65\x63\145\x69\160\164\x20\123\x61\166\x65\144"); } catch (\Exception $e) { DB::rollBack(); return back()->with("\x65\x72\x72\x6f\x72", $e->getMessage()); } } public function show($id) { $receiving = paymentReceiving::find($id); return view("\106\x69\156\x61\156\143\145\56\x72\x65\x63\145\151\166\151\x6e\x67\56\x72\145\x63\x65\151\160\164", compact("\162\x65\143\x65\x69\166\151\x6e\x67")); } public function edit(paymentReceiving $paymentReceiving) { } public function update(Request $request, paymentReceiving $paymentReceiving) { } public function destroy(paymentReceiving $paymentReceiving) { } }
