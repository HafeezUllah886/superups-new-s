<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\categories; use App\Models\products; use App\Models\purchase; use App\Models\purchase_details; use App\Models\purchase_payments; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class PurchaseController extends Controller { public function index() { $purchases = purchase::with("\160\x61\x79\x6d\145\156\x74\x73")->orderby("\x69\144", "\x64\145\163\143")->paginate(10); return view("\x70\x75\x72\x63\x68\x61\163\x65\56\x69\x6e\x64\145\170", compact("\x70\165\162\143\150\x61\x73\145\163")); } public function create() { $products = products::orderby("\x6e\x61\x6d\145", "\x61\x73\x63")->get(); $warehouses = warehouses::all(); $vendors = accounts::vendor()->get(); $accounts = accounts::business()->get(); $cats = categories::orderBy("\x6e\141\155\x65", "\x61\163\143")->get(); return view("\160\x75\162\x63\150\141\163\x65\x2e\x63\162\x65\x61\164\x65", compact("\160\x72\x6f\x64\165\x63\164\x73", "\167\x61\162\x65\150\157\x75\163\145\x73", "\x76\145\x6e\144\157\x72\x73", "\141\143\x63\157\x75\156\x74\x73", "\143\x61\x74\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\151\144")) { throw new Exception("\x50\x6c\x65\x61\163\145\x20\123\145\x6c\x65\143\x74\x20\x41\164\154\x65\141\x73\164\40\117\x6e\x65\x20\120\162\157\144\x75\143\x74"); } DB::beginTransaction(); $ref = getRef(); $purchase = purchase::create(array("\166\145\x6e\x64\157\x72\x49\104" => $request->vendorID, "\x64\141\164\x65" => $request->date, "\x6e\x6f\x74\x65\x73" => $request->notes, "\x64\151\x73\143\x6f\165\x6e\x74" => $request->discount, "\144\143" => $request->dc, "\x69\156\166" => $request->inv, "\x72\x65\x66\x49\104" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { if ($request->qty[$key] > 0) { $qty = $request->qty[$key]; $pprice = $request->pprice[$key]; $price = $request->price[$key]; $amount = $pprice * $qty; $total += $amount; purchase_details::create(array("\x70\x75\x72\143\x68\x61\x73\x65\111\104" => $purchase->id, "\x70\x72\157\x64\x75\143\164\x49\104" => $id, "\160\x70\x72\x69\143\145" => $pprice, "\160\162\x69\143\x65" => $price, "\x71\164\171" => $qty, "\x61\155\x6f\x75\x6e\164" => $amount, "\144\141\x74\145" => $request->date, "\162\145\146\111\x44" => $ref, "\167\141\162\x65\150\x6f\x75\x73\145\111\104" => $request->warehouse[$key])); createStock($id, $qty, 0, $request->date, "\120\x75\162\143\x68\141\163\145\x64", $ref, $request->warehouse[$key]); $product = products::find($id); $product->update(array("\x70\x70\x72\x69\x63\145" => $pprice, "\160\162\x69\x63\x65" => $price)); } } $net = $total + $request->dc - $request->discount; $purchase->update(array("\x74\x6f\164\x61\154" => $net)); if ($request->status == "\x70\x61\151\x64") { purchase_payments::create(array("\160\x75\x72\x63\x68\x61\163\x65\111\104" => $purchase->id, "\x61\x63\143\x6f\165\156\164\x49\x44" => $request->accountID, "\144\141\164\x65" => $request->date, "\141\x6d\157\x75\x6e\x74" => $net, "\156\157\x74\x65\x73" => "\106\165\x6c\154\x20\120\141\x69\x64", "\x72\x65\146\111\104" => $ref)); createTransaction($request->accountID, $request->date, 0, $net, "\x50\x61\x79\x6d\x65\156\x74\40\157\x66\40\120\165\x72\143\150\x61\163\145\40\x4e\157\x2e\x20{$purchase->id}", $ref); } elseif ($request->status == "\x61\144\x76\x61\156\x63\x65\144") { $balance = getAccountBalance($request->vendorID); if ($net > $balance) { createTransaction($request->vendorID, $request->date, 0, $net, "\120\145\x6e\x64\151\x6e\147\x20\101\x6d\157\165\156\164\40\157\x66\x20\x50\165\162\143\x68\141\x73\x65\x20\x4e\157\x2e\x20{$purchase->id}", $ref); DB::commit(); return back()->with("\x73\x75\x63\143\145\163\x73", "\x50\x75\162\143\x68\141\163\145\x20\x43\162\x65\x61\x74\145\x64\72\x20\x42\x61\x6c\x61\x6e\143\x65\x20\167\x61\163\40\156\x6f\164\x20\145\x6e\x6f\165\x67\x68\x20\x6d\x6f\166\145\x64\40\164\x6f\40\x75\x6e\160\141\x69\x64\x20\57\x20\160\145\x6e\x64\151\x6e\x67"); } purchase_payments::create(array("\160\165\162\143\x68\141\x73\x65\x49\104" => $purchase->id, "\x61\143\x63\157\x75\x6e\164\111\104" => $request->accountID, "\144\x61\x74\x65" => $request->date, "\141\155\x6f\x75\156\164" => $net, "\156\157\164\x65\x73" => "\x46\x75\x6c\x6c\x20\120\x61\151\144", "\162\x65\146\111\104" => $ref)); createTransaction($request->vendorID, $request->date, 0, $net, "\120\165\x72\x63\150\141\x73\145\40\116\157\56\x20{$purchase->id}", $ref); } else { createTransaction($request->vendorID, $request->date, 0, $net, "\x50\145\156\x64\x69\x6e\x67\x20\101\x6d\157\165\156\x74\40\157\x66\x20\x50\165\x72\x63\150\141\163\145\x20\x4e\157\x2e\x20{$purchase->id}", $ref); } DB::commit(); return back()->with("\x73\165\143\143\145\163\163", "\120\165\x72\x63\x68\141\x73\x65\40\x43\x72\145\141\x74\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\x72\157\x72", $e->getMessage()); } } public function show(purchase $purchase) { return view("\x70\x75\x72\x63\x68\x61\x73\145\x2e\x76\151\145\167", compact("\x70\165\162\x63\150\141\x73\x65")); } public function edit(purchase $purchase) { $products = products::orderby("\156\141\155\145", "\141\x73\143")->get(); $warehouses = warehouses::all(); $vendors = accounts::vendor()->get(); $accounts = accounts::business()->get(); return view("\x70\165\162\143\150\141\163\x65\56\x65\x64\x69\164", compact("\160\x72\157\144\165\x63\164\163", "\x77\141\x72\145\x68\x6f\x75\163\145\x73", "\x76\x65\x6e\x64\157\x72\163", "\x61\x63\x63\157\165\156\164\163", "\160\x75\162\x63\x68\141\163\145")); } public function update(Request $request, purchase $purchase) { try { if ($request->isNotFilled("\x69\144")) { throw new Exception("\x50\154\145\141\x73\145\40\x53\145\x6c\145\143\x74\40\101\x74\x6c\145\141\x73\164\x20\x4f\x6e\145\40\x50\x72\157\144\165\143\x74"); } DB::beginTransaction(); foreach ($purchase->payments as $payment) { transactions::where("\162\x65\x66\111\x44", $payment->refID)->delete(); $payment->delete(); } foreach ($purchase->details as $product) { stock::where("\x72\x65\x66\111\104", $product->refID)->delete(); $product->delete(); } transactions::where("\x72\x65\146\x49\x44", $purchase->refID)->delete(); $purchase->update(array("\x76\145\156\144\157\x72\x49\x44" => $request->vendorID, "\144\141\164\x65" => $request->date, "\x6e\x6f\x74\x65\x73" => $request->notes, "\x64\151\163\143\157\x75\156\164" => $request->discount, "\x64\143" => $request->dc, "\151\156\166" => $request->inv)); $ids = $request->id; $ref = $purchase->refID; $total = 0; foreach ($ids as $key => $id) { if ($request->qty[$key] > 0) { $qty = $request->qty[$key]; $pprice = $request->pprice[$key]; $price = $request->price[$key]; $amount = $pprice * $qty; $total += $amount; purchase_details::create(array("\x70\x75\x72\143\150\x61\163\145\x49\104" => $purchase->id, "\160\162\x6f\x64\x75\143\164\x49\104" => $id, "\160\x70\x72\151\143\145" => $pprice, "\160\162\151\x63\x65" => $price, "\x71\164\171" => $qty, "\x61\155\x6f\165\x6e\x74" => $amount, "\x64\x61\x74\145" => $request->date, "\x72\x65\x66\x49\104" => $ref, "\167\x61\162\x65\x68\x6f\165\163\x65\x49\x44" => $request->warehouse[$key])); createStock($id, $qty, 0, $request->date, "\120\165\x72\143\150\141\x73\x65\x64", $ref, $request->warehouse[$key]); $product = products::find($id); $product->update(array("\x70\x70\x72\151\x63\145" => $pprice, "\x70\x72\151\143\x65" => $price)); } } $net = $total + $request->dc - $request->discount; $purchase->update(array("\x74\157\x74\141\154" => $net)); if ($request->status == "\160\141\151\x64") { purchase_payments::create(array("\x70\x75\162\x63\150\141\163\145\x49\x44" => $purchase->id, "\x61\143\143\157\x75\156\x74\111\104" => $request->accountID, "\x64\141\x74\x65" => $request->date, "\141\x6d\x6f\165\x6e\164" => $net, "\x6e\157\164\145\163" => "\106\165\x6c\x6c\40\x50\x61\x69\x64", "\x72\x65\146\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, 0, $net, "\120\x61\x79\x6d\x65\156\164\x20\x6f\146\40\x50\x75\x72\x63\150\141\163\x65\x20\116\x6f\x2e\x20{$purchase->id}", $ref); } elseif ($request->status == "\141\x64\x76\141\156\143\145\x64") { $balance = getAccountBalance($request->vendorID); if ($net > $balance) { createTransaction($request->vendorID, $request->date, 0, $net, "\120\145\x6e\x64\x69\x6e\147\x20\x41\155\157\165\x6e\164\x20\x6f\x66\x20\x50\165\x72\x63\x68\x61\163\x65\40\116\x6f\x2e\x20{$purchase->id}", $ref); DB::commit(); return back()->with("\163\x75\143\x63\145\163\x73", "\x50\x75\162\143\x68\x61\163\145\x20\x43\x72\145\x61\164\x65\x64\72\x20\102\x61\x6c\141\156\143\145\40\167\x61\x73\x20\156\157\164\40\x65\156\x6f\165\147\x68\x20\x6d\157\x76\x65\144\40\164\157\40\x75\x6e\x70\141\x69\x64\x20\x2f\x20\x70\x65\x6e\x64\x69\156\147"); } purchase_payments::create(array("\160\x75\162\143\150\x61\163\x65\x49\x44" => $purchase->id, "\141\x63\x63\157\165\x6e\x74\x49\x44" => $request->accountID, "\144\141\x74\145" => $request->date, "\x61\155\157\165\156\x74" => $net, "\156\x6f\164\x65\163" => "\x46\x75\x6c\x6c\40\x50\141\151\x64", "\x72\x65\x66\111\104" => $ref)); createTransaction($request->vendorID, $request->date, 0, $net, "\x50\x75\x72\x63\150\x61\163\x65\40\116\157\x2e\x20{$purchase->id}", $ref); } else { createTransaction($request->vendorID, $request->date, 0, $net, "\x50\145\156\x64\151\156\x67\x20\101\155\x6f\x75\156\x74\x20\157\x66\40\120\165\162\143\x68\141\x73\x65\40\116\x6f\x2e\x20{$purchase->id}", $ref); } DB::commit(); return back()->with("\163\x75\x63\x63\x65\x73\x73", "\120\165\x72\143\x68\x61\163\x65\x20\x55\x70\144\141\164\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\162\x6f\162", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $purchase = purchase::find($id); foreach ($purchase->payments as $payment) { transactions::where("\x72\x65\x66\111\x44", $payment->refID)->delete(); $payment->delete(); } foreach ($purchase->details as $product) { stock::where("\162\145\146\x49\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\x72\145\x66\x49\x44", $purchase->refID)->delete(); $purchase->delete(); DB::commit(); session()->forget("\143\x6f\156\146\151\x72\x6d\x65\x64\x5f\x70\x61\x73\163\x77\x6f\162\x64"); return redirect()->route("\160\x75\162\143\x68\x61\163\145\x2e\151\156\x64\x65\x78")->with("\163\165\143\143\x65\163\163", "\120\x75\x72\143\150\x61\163\145\40\104\x65\x6c\145\x74\x65\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\x63\157\x6e\x66\151\162\x6d\145\144\137\x70\141\x73\163\167\x6f\162\144"); return redirect()->route("\x70\165\x72\x63\x68\x61\x73\145\56\151\x6e\144\x65\170")->with("\x65\162\162\x6f\x72", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::find($id); return $product; } }