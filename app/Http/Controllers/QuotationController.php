<?php
 namespace App\Http\Controllers; use App\Models\categories; use App\Models\products; use App\Models\quotation; use App\Models\quotationDetails; use Barryvdh\DomPDF\Facade\Pdf; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class QuotationController extends Controller { public function index() { $quotations = quotation::orderBy("\x69\x64", "\144\x65\163\143")->get(); return view("\161\165\x6f\164\x61\x74\x69\x6f\156\56\x69\x6e\x64\x65\170", compact("\161\x75\x6f\164\141\164\x69\157\x6e\x73")); } public function create() { $products = products::orderby("\156\x61\155\145", "\x61\x73\143")->get(); $cats = categories::orderBy("\156\141\x6d\145", "\141\x73\x63")->get(); return view("\161\x75\x6f\164\x61\164\151\157\x6e\56\143\x72\145\x61\x74\145", compact("\x70\x72\x6f\x64\165\143\164\x73", "\143\x61\x74\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\x50\x6c\x65\141\x73\x65\40\123\145\x6c\x65\143\x74\40\101\x74\x6c\145\141\163\164\40\117\156\145\x20\120\162\157\144\x75\143\x74"); } DB::beginTransaction(); $quot = quotation::create(array("\143\x75\x73\164\157\x6d\x65\162\x4e\141\x6d\145" => $request->customer, "\143\165\163\x74\157\155\x65\x72\x41\144\x64\x72\145\163\163" => $request->address, "\156\157\x74\145\163" => $request->notes, "\x64\x69\x73\x63\157\165\x6e\164" => $request->discount, "\x64\143" => $request->dc, "\x64\x61\x74\x65" => $request->date, "\x76\141\154\151\144\124\151\154\154" => $request->valid)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { if ($request->amount[$key] > 0) { $qty = $request->qty[$key]; $price = $request->price[$key]; $total += $request->amount[$key]; quotationDetails::create(array("\161\165\157\x74\111\x44" => $quot->id, "\160\x72\157\x64\x75\143\x74\111\x44" => $id, "\160\x72\x69\143\x65" => $price, "\x71\164\x79" => $qty, "\x61\x6d\x6f\165\x6e\x74" => $request->amount[$key])); } } $discount = $request->discount; $dc = $request->dc; $net = $total + $dc - $discount; $quot->update(array("\164\157\x74\x61\154" => $net)); DB::commit(); return to_route("\161\165\157\164\141\164\151\157\156\x2e\x73\x68\157\x77", $quot->id)->with("\163\x75\x63\143\x65\x73\163", "\121\x75\x6f\164\x61\x74\151\x6f\x6e\x20\103\x72\x65\141\x74\x65\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\x72\162\x6f\x72", $e->getMessage()); } } public function show($id) { $quot = quotation::find($id); return view("\161\x75\157\x74\x61\164\151\157\156\x2e\x76\151\145\x77", compact("\161\x75\157\x74")); } public function pdf($id) { $quot = quotation::find($id); $pdf = Pdf::loadview("\x71\165\x6f\164\x61\164\151\157\156\56\160\x64\x66", compact("\161\x75\x6f\164")); return $pdf->download("\121\x75\x6f\x74\x61\x74\x69\157\x6e\x20\x4e\157\56\40{$quot->id}\x2e\x70\144\x66"); } public function edit(quotation $quotation) { } public function update(Request $request, quotation $quotation) { } public function destroy($id) { try { DB::beginTransaction(); $quot = quotation::find($id); foreach ($quot->details as $product) { $product->delete(); } $quot->delete(); DB::commit(); session()->forget("\143\157\156\146\x69\x72\155\x65\x64\137\x70\x61\163\x73\167\x6f\x72\144"); return to_route("\161\x75\x6f\x74\x61\164\151\x6f\x6e\56\151\156\x64\x65\170")->with("\163\165\143\143\x65\x73\163", "\x51\x75\x6f\x74\x61\x74\151\157\x6e\40\x44\x65\154\145\x74\x65\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\157\156\x66\x69\162\x6d\145\144\x5f\x70\x61\x73\x73\x77\157\162\144"); return to_route("\161\165\x6f\x74\x61\164\151\157\156\x2e\151\156\144\145\170")->with("\x65\x72\162\157\x72", $e->getMessage()); } } }
